# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду. Также укажите в комментариях версию Python и разрядность вашей ОС.

# python 3.7
# разрядность 64

import summem

# 2. Во втором массиве сохранить индексы четных элементов первого массива. Например, если дан массив со значениями 8, 3, 15, 6, 4, 2, то во второй
# массив надо заполнить значениями 1, 4, 5, 6 (или 0, 3, 4, 5 - если индексация начинается с нуля), т.к. именно в этих позициях первого массива стоят
# четные числа.

list_1, list_2 = [8, 3, 15, 6, 4, 2], []

for i in range(len(list_1)):
    if list_1[i] % 2 == 0:
        list_2.append(i)

sum_memory = summem.SMem()
sum_memory.sum_items(locals())
sum_memory.print_sum()
